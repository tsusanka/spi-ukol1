
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Ondřej Paška
> K = 6
> L = 5
> 
> ## 1 I
> n = 20;
> alpha = 0.01;
> x = rnorm(n, mean=10.5, sd=1.3);
> 
> hypothesisTest = t.test(x, mu=10, conf.level = 1-alpha);
> print(hypothesisTest);

	One Sample t-test

data:  x
t = 2.0203, df = 19, p-value = 0.05768
alternative hypothesis: true mean is not equal to 10
99 percent confidence interval:
  9.764424 11.367804
sample estimates:
mean of x 
 10.56611 

> 
> ## 1 Ia
> 
> probability = 1 - (alpha / 2)
> degreesOfFreedom = n-1
> quantile = qt(probability, degreesOfFreedom)
> criticalValue = qt(probability, degreesOfFreedom, lower.tail = FALSE)
> 
> # slide 50 lecture 17
> marginError = (sd(x)/sqrt(n)) * quantile
> intervalLowerBound = mean(x) - marginError
> print("intervalLowerBound")
[1] "intervalLowerBound"
> print(intervalLowerBound)
[1] 9.764424
> intervalUpperBound = mean(x) + marginError
> print("intervalUpperBound")
[1] "intervalUpperBound"
> print(intervalUpperBound)
[1] 11.3678
> 
> ## 1 Ib
> mu = 10
> if ((mu > intervalLowerBound) && (mu < intervalUpperBound)) {
+ 	print("H0 is accepted")
+ } else {
+ 	print("H0 is rejected")
+ }
[1] "H0 is accepted"
> 
> ## 1 Ic
> # slide 46 lec 17
> tStatisticValue = (mean(x) - mu) / (sd(x) / sqrt(n))
> if (tStatisticValue > abs(criticalValue)) {
+ 	print("H0 is rejected by T-statistic")
+ } else {
+ 	print("H0 is accepted by T-statistic")
+ }
[1] "H0 is accepted by T-statistic"
> 
> 
> 
> ## 1 II
> print("First one-sided tests:")
[1] "First one-sided tests:"
> t.test(x, mu=10, alternative = "greater", conf.level = 1-alpha);

	One Sample t-test

data:  x
t = 2.0203, df = 19, p-value = 0.02884
alternative hypothesis: true mean is greater than 10
99 percent confidence interval:
 9.854501      Inf
sample estimates:
mean of x 
 10.56611 

> 
> print("Second one-sided tests:")
[1] "Second one-sided tests:"
> t.test(x, mu=10, alternative = "less", conf.level = 1-alpha);

	One Sample t-test

data:  x
t = 2.0203, df = 19, p-value = 0.9712
alternative hypothesis: true mean is less than 10
99 percent confidence interval:
     -Inf 11.27773
sample estimates:
mean of x 
 10.56611 

> 
> 	## 1 IIa
> 	probability = 1 - alpha # 0.99
> 	quantile = qt(probability, degreesOfFreedom)
> 	criticalValue = qt(probability, degreesOfFreedom, lower.tail = FALSE)
> 
> 	marginError = (sd(x)/sqrt(n)) * quantile
> 	intervalLowerBound = - Inf
> 	intervalUpperBound = mean(x) + marginError
> 
> 	## 1 IIb
> 	if ((mu > intervalLowerBound) && (mu < intervalUpperBound)) {
+ 		print("H0 is accepted")
+ 	} else {
+ 		print("H0 is rejected")
+ 	}
[1] "H0 is accepted"
> 
> 	## 1 IIc
> 	tStatisticValue = (mean(x) - mu) / (sd(x) / sqrt(n))
> 	if (tStatisticValue > abs(criticalValue)) {
+ 		print("H0 is rejected by T-statistic")
+ 	} else {
+ 		print("H0 is accepted by T-statistic")
+ 	}
[1] "H0 is accepted by T-statistic"
> 
> ################################################################################
> ##################################### PART 2 #####################################
> ################################################################################
> 
> ####################### 2 I ##########################
> n = 20;
> alpha = 0.01;
> x = rnorm(n, mean=10, sd=1);
> error = rnorm(n, mean=0.5, sd=0.8306624);
> y = x + error;
> 
> tTestPair = t.test(x, y=y, paired = TRUE, alternative = "less", conf.level = 1-alpha)
> 
> ## 2 Ia
> print(tTestPair)

	Paired t-test

data:  x and y
t = -2.7241, df = 19, p-value = 0.006734
alternative hypothesis: true difference in means is less than 0
99 percent confidence interval:
        -Inf -0.04023544
sample estimates:
mean of the differences 
             -0.5936044 

> 
> ## 2 Ib
> diff = x - y
> 
> test = t.test(diff, y=y, paired=TRUE, alternative = "greater", conf.level = 1-alpha, mu=0)
> print(test)

	Paired t-test

data:  diff and y
t = -21.9664, df = 19, p-value = 1
alternative hypothesis: true difference in means is greater than 0
99 percent confidence interval:
 -12.98135       Inf
sample estimates:
mean of the differences 
              -11.63613 

> 
> ####################### 2 II ##########################
> 
> n1 = 20;
> n2 = 25;
> alpha = 0.01
> x=rnorm(n1, mean=10, sd=1.3)
> y=rnorm(n2, mean=11.25, sd=1.3)
> 
> t.test(x, y=y, paired = FALSE, var.equal = TRUE, conf.level = 1-alpha)

	Two Sample t-test

data:  x and y
t = -1.2522, df = 43, p-value = 0.2173
alternative hypothesis: true difference in means is not equal to 0
99 percent confidence interval:
 -1.7818544  0.6513663
sample estimates:
mean of x mean of y 
 10.39239  10.95763 

> 
> ## 2 IIa
> t.test(x, y=y, paired = FALSE, var.equal = TRUE, conf.level = 1-alpha, alternative="less")

	Two Sample t-test

data:  x and y
t = -1.2522, df = 43, p-value = 0.1086
alternative hypothesis: true difference in means is less than 0
99 percent confidence interval:
      -Inf 0.5254883
sample estimates:
mean of x mean of y 
 10.39239  10.95763 

> 
> ## 2 IIb
> s2x = sum( (x - mean(x))^2 ) / (length(x)-1)
> s2y = sum( (y - mean(y))^2 ) / (length(y)-1)
> 
> Sxy = sqrt( ((length(x)-1)*s2x + (length(y)-1)*s2y)   /  (length(x)+length(y) -2) )
> 
> TStat = (mean(x) - mean(y)) / (Sxy * sqrt(1/length(x) + 1/length(y))) 
> print(TStat)
[1] -1.25216
> df = length(x) + length(y) -2
> print(df)
[1] 43
> 
> tCriticalValue = qt(1-alpha, df, lower.tail = TRUE)
> 
> pVal = pt(TStat, df = df)
> print(pVal)
[1] 0.1086399
> 
> ####################### 2 III ##########################
> 
> n1 = 20;
> n2 = 25;
> alpha = 0.01
> x=rnorm(n1, mean=10, sd=1.3)
> y=rnorm(n2, mean=11.28, sd=1.2)
> 
> t.test(x, y=y, paired = FALSE, var.equal = FALSE, conf.level = 1-alpha)

	Welch Two Sample t-test

data:  x and y
t = -3.6299, df = 31.816, p-value = 0.0009838
alternative hypothesis: true difference in means is not equal to 0
99 percent confidence interval:
 -2.4155555 -0.3376803
sample estimates:
mean of x mean of y 
 10.29285  11.66947 

> 
> s2x = sum( (x - mean(x))^2 ) / (length(x)-1)
> s2y = sum( (y - mean(y))^2 ) / (length(y)-1)
> 
> sxY = sqrt(s2x/n1 + s2y/n2)
> 
> TStat = (mean(x) - mean(y)) / sxY
> print(TStat)
[1] -3.629872
> 
> df = ((s2x/n1 + s2y/n2)^2) / (((s2x/n1)^2) / (n1-1) + ((s2y/n2)^2) / (n2-1)) 
> print(df)
[1] 31.81631
> 
> tCriticalValue = qt(1-alpha, df, lower.tail = TRUE)
> pVal = pt(TStat, df = df)
> print(pVal)
[1] 0.0004918894
> 
> ################################################################################
> ##################################### PART 3 #####################################
> ################################################################################
> 
> 
> ## 3 I
> 
> sequenceLength = 2500000; # 0.434s
> 
> ## 3 II
> 
> sampleSize = L*40;
> time1 = time2 = numeric(sampleSize); # Declare an array
> 
> for(i in 1:sampleSize) {
+ 	x = runif(sequenceLength, 0, 100); # Generate the sequence to be sorted
+ 	# Measure sort times. The user-space time is at system.time(...)[1]
+ 	# Inside system.time we must use x1 <- value and not x = value. The latter syntax is reserved for parameters.
+ 	time1[i] = system.time(x1 <- sort(x, method = "quick"),  gcFirst = TRUE)[1];
+ 	time2[i] = system.time(x2 <- sort(x, method = "shell"), gcFirst = TRUE)[1];
+ }
> 
> meanSingleton = mean(time1)
> print("meanSingleton: ")
[1] "meanSingleton: "
> print(meanSingleton)
[1] 0.62838
> meanSedgewick = mean(time2)
> print("meanSedgewick: ")
[1] "meanSedgewick: "
> print(meanSedgewick)
[1] 0.89932
> 
> alpha = K / 100
> t.test(time1, time2, paired = FALSE, var.equal = FALSE, conf.level = 1-alpha)

	Welch Two Sample t-test

data:  time1 and time2
t = -32.3444, df = 387.643, p-value < 2.2e-16
alternative hypothesis: true difference in means is not equal to 0
94 percent confidence interval:
 -0.2867411 -0.2551389
sample estimates:
mean of x mean of y 
  0.62838   0.89932 

> 
> ## 3 III
> time3 = time4 = numeric(sampleSize); # Declare an array
> for(i in 1:sampleSize){
+ 	x = runif(sequenceLength, 0, 100); # Generate the sequence to be sorted
+ 	time3[i] = system.time(x1 <- sort(x, method = "quick"),  gcFirst = TRUE)[1];
+ }
> sampleSize2 = L*35;
> for(i in 1:sampleSize2){
+ 	x = runif(sequenceLength, 0, 100); # Generate the sequence to be sorted
+ 	time4[i] = system.time(x2 <- sort(x, method = "shell"), gcFirst = TRUE)[1];
+ }
> 
> meanSingleton2 = mean(time3)
> print("meanSingleton2: ")
[1] "meanSingleton2: "
> print(meanSingleton2)
[1] 0.641305
> meanSedgewick2 = mean(time4)
> print("meanSedgewick2: ")
[1] "meanSedgewick2: "
> print(meanSedgewick2)
[1] 0.7398
> 
